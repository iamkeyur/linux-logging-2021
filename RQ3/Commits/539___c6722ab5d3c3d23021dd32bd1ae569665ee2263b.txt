['c6722ab5d3c3d23021dd32bd1ae569665ee2263b', '410.txt', 'LogLevel']
commit c6722ab5d3c3d23021dd32bd1ae569665ee2263b
Author: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
Date:   Fri Jun 10 12:59:11 2016 +0530

    greybus: audio: Ratelimit err messages in bundle, topology driver
    
    Earlier I have shared a patch to rate limit err messages in audio_codec
    driver. However, missed to include suggestion from Mark to do similar
    changes in audio bundle & topology parser as well. Doing it now.
    
    Testing Done: Compile tested
    
    Fixes: 4cb3d109e5fc ("audio: Ratelimit err messages")
    Signed-off-by: Vaibhav Agarwal <vaibhav.agarwal@linaro.org>
    Reviewed-by: Vaibhav Hiremath <vaibhav.hiremath@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

diff --git a/drivers/staging/greybus/audio_module.c b/drivers/staging/greybus/audio_module.c
index 95d2ddadeeab..81001329aad2 100644
--- a/drivers/staging/greybus/audio_module.c
+++ b/drivers/staging/greybus/audio_module.c
@@ -23,8 +23,9 @@ static int gbaudio_request_jack(struct gbaudio_module_info *module,
 {
 	int report, button_status;
 
-	dev_warn(module->dev, "Jack Event received: type: %u, event: %u\n",
-		 req->jack_attribute, req->event);
+	dev_warn_ratelimited(module->dev,
+			     "Jack Event received: type: %u, event: %u\n",
+			     req->jack_attribute, req->event);
 
 	if (req->event == GB_AUDIO_JACK_EVENT_REMOVAL) {
 		module->jack_type = 0;
@@ -42,8 +43,9 @@ static int gbaudio_request_jack(struct gbaudio_module_info *module,
 	report &= ~GBCODEC_JACK_MASK;
 	report |= req->jack_attribute & GBCODEC_JACK_MASK;
 	if (module->jack_type)
-		dev_warn(module->dev, "Modifying jack from %d to %d\n",
-			 module->jack_type, report);
+		dev_warn_ratelimited(module->dev,
+				     "Modifying jack from %d to %d\n",
+				     module->jack_type, report);
 
 	module->jack_type = report;
 	snd_soc_jack_report(&module->headset_jack, report, GBCODEC_JACK_MASK);
@@ -56,12 +58,14 @@ static int gbaudio_request_button(struct gbaudio_module_info *module,
 {
 	int soc_button_id, report;
 
-	dev_warn(module->dev, "Button Event received: id: %u, event: %u\n",
-		 req->button_id, req->event);
+	dev_warn_ratelimited(module->dev,
+			     "Button Event received: id: %u, event: %u\n",
+			     req->button_id, req->event);
 
 	/* currently supports 4 buttons only */
 	if (!module->jack_type) {
-		dev_err(module->dev, "Jack not present. Bogus event!!\n");
+		dev_err_ratelimited(module->dev,
+				    "Jack not present. Bogus event!!\n");
 		return -EINVAL;
 	}
 
@@ -84,7 +88,8 @@ static int gbaudio_request_button(struct gbaudio_module_info *module,
 		soc_button_id = SND_JACK_BTN_3;
 		break;
 	default:
-		dev_err(module->dev, "Invalid button request received\n");
+		dev_err_ratelimited(module->dev,
+				    "Invalid button request received\n");
 		return -EINVAL;
 	}
 
@@ -138,8 +143,8 @@ static int gbaudio_codec_request_handler(struct gb_operation *op)
 		break;
 
 	default:
-		dev_err(&connection->bundle->dev,
-			"Invalid Audio Event received\n");
+		dev_err_ratelimited(&connection->bundle->dev,
+				    "Invalid Audio Event received\n");
 		return -EINVAL;
 	}
 
diff --git a/drivers/staging/greybus/audio_topology.c b/drivers/staging/greybus/audio_topology.c
index dfe120baecad..1e0768670b69 100644
--- a/drivers/staging/greybus/audio_topology.c
+++ b/drivers/staging/greybus/audio_topology.c
@@ -173,8 +173,8 @@ static int gbcodec_mixer_ctl_get(struct snd_kcontrol *kcontrol,
 	ret = gb_audio_gb_get_control(module->mgmt_connection, data->ctl_id,
 				      GB_AUDIO_INVALID_INDEX, &gbvalue);
 	if (ret) {
-		dev_err(codec->dev, "%d:Error in %s for %s\n", ret, __func__,
-			kcontrol->id.name);
+		dev_err_ratelimited(codec->dev, "%d:Error in %s for %s\n", ret,
+				    __func__, kcontrol->id.name);
 		return ret;
 	}
 
@@ -253,8 +253,8 @@ static int gbcodec_mixer_ctl_put(struct snd_kcontrol *kcontrol,
 	ret = gb_audio_gb_set_control(module->mgmt_connection, data->ctl_id,
 				      GB_AUDIO_INVALID_INDEX, &gbvalue);
 	if (ret) {
-		dev_err(codec->dev, "%d:Error in %s for %s\n", ret, __func__,
-			kcontrol->id.name);
+		dev_err_ratelimited(codec->dev, "%d:Error in %s for %s\n", ret,
+				    __func__, kcontrol->id.name);
 	}
 
 	return ret;
@@ -335,8 +335,8 @@ static int gbcodec_mixer_dapm_ctl_get(struct snd_kcontrol *kcontrol,
 	ret = gb_audio_gb_get_control(module->mgmt_connection, data->ctl_id,
 				      GB_AUDIO_INVALID_INDEX, &gbvalue);
 	if (ret) {
-		dev_err(codec->dev, "%d:Error in %s for %s\n", ret, __func__,
-			kcontrol->id.name);
+		dev_err_ratelimited(codec->dev, "%d:Error in %s for %s\n", ret,
+				    __func__, kcontrol->id.name);
 		return ret;
 	}
 	/* update ucontrol */
@@ -393,9 +393,9 @@ static int gbcodec_mixer_dapm_ctl_put(struct snd_kcontrol *kcontrol,
 					      data->ctl_id,
 					      GB_AUDIO_INVALID_INDEX, &gbvalue);
 		if (ret) {
-			dev_err(codec->dev,
-				"%d:Error in %s for %s\n", ret, __func__,
-				kcontrol->id.name);
+			dev_err_ratelimited(codec->dev,
+					    "%d:Error in %s for %s\n", ret,
+					    __func__, kcontrol->id.name);
 		}
 	}
 
@@ -600,8 +600,9 @@ static int gbaudio_widget_event(struct snd_soc_dapm_widget *w,
 		break;
 	}
 	if (ret)
-		dev_err(codec->dev, "%d: widget, event:%d failed:%d\n", wid,
-			event, ret);
+		dev_err_ratelimited(codec->dev,
+				    "%d: widget, event:%d failed:%d\n", wid,
+				    event, ret);
 	return ret;
 }
 
