['9c219b2337b87108cc57acf93e31ce1ab0e8013e', '634.txt', 'FixFormatSpecifier']
commit 9c219b2337b87108cc57acf93e31ce1ab0e8013e
Author: Lee Jones <lee.jones@linaro.org>
Date:   Thu Aug 4 10:21:45 2016 +0100

    remoteproc: core: Ensure error message is clear
    
    Before this patch, the dma_alloc_coherent() failure path printed out:
    
      "dma_alloc_coherent err: 16760832"
    
    ... alluding to the Linux error code being 16760832, but seeing as
    Linux error codes are all negative, this looks like a signed/unsigned
    issue.  In fact, the message is trying to print the length of the
    requested memory region.  Let's clear that up.
    
    While we're at it, let's standardise the way 'len' is printed.  In
    all other locations 'len' is in hex prefixed by a '0x' for clarity.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

diff --git a/drivers/remoteproc/remoteproc_core.c b/drivers/remoteproc/remoteproc_core.c
index fe0539ed9cb5..1b79692e863c 100644
--- a/drivers/remoteproc/remoteproc_core.c
+++ b/drivers/remoteproc/remoteproc_core.c
@@ -579,7 +579,7 @@ static int rproc_handle_carveout(struct rproc *rproc,
 		return -EINVAL;
 	}
 
-	dev_dbg(dev, "carveout rsc: da %x, pa %x, len %x, flags %x\n",
+	dev_dbg(dev, "carveout rsc: da %x, pa %x, len 0x%x, flags %x\n",
 			rsc->da, rsc->pa, rsc->len, rsc->flags);
 
 	carveout = kzalloc(sizeof(*carveout), GFP_KERNEL);
@@ -588,7 +588,8 @@ static int rproc_handle_carveout(struct rproc *rproc,
 
 	va = dma_alloc_coherent(dev->parent, rsc->len, &dma, GFP_KERNEL);
 	if (!va) {
-		dev_err(dev->parent, "dma_alloc_coherent err: %d\n", rsc->len);
+		dev_err(dev->parent,
+			"failed to allocate dma memory: len 0x%x\n", rsc->len);
 		ret = -ENOMEM;
 		goto free_carv;
 	}
