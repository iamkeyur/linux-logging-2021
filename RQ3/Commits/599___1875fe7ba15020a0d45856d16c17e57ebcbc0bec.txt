['1875fe7ba15020a0d45856d16c17e57ebcbc0bec', '339.txt', 'Mislead/Ambiguous']
commit 1875fe7ba15020a0d45856d16c17e57ebcbc0bec
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Dec 12 11:35:32 2017 +0000

    drm/i915: Downgrade misleading "Memory usable" message
    
    It never meant what it said, as it was always the total size of the
    Global GTT and not a limit upon memory usage. Originally it served as a
    quick guide to the largest batch that could be submitted by userspace,
    an approximation to its maximum RSS, but was phrased badly. Today with
    the 48b ppgtt, it is even more meaningless. Replace with a more specific
    debug message; those wanting to know how much "video ram" they have
    should consult the userspace libraries for the relevant approximation.
    
    v2: Rebase
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171212113532.22574-1-chris@chris-wilson.co.uk
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>

diff --git a/drivers/gpu/drm/i915/i915_gem_gtt.c b/drivers/gpu/drm/i915/i915_gem_gtt.c
index a7fe05666f72..a0579b0c8581 100644
--- a/drivers/gpu/drm/i915/i915_gem_gtt.c
+++ b/drivers/gpu/drm/i915/i915_gem_gtt.c
@@ -3483,10 +3483,9 @@ int i915_ggtt_probe_hw(struct drm_i915_private *dev_priv)
 	}
 
 	/* GMADR is the PCI mmio aperture into the global GTT. */
-	DRM_INFO("Memory usable by graphics device = %lluM\n",
-		 ggtt->base.total >> 20);
+	DRM_DEBUG_DRIVER("GGTT size = %lluM\n", ggtt->base.total >> 20);
 	DRM_DEBUG_DRIVER("GMADR size = %lluM\n", (u64)ggtt->mappable_end >> 20);
-	DRM_DEBUG_DRIVER("GTT stolen size = %lluM\n",
+	DRM_DEBUG_DRIVER("DSM size = %lluM\n",
 			 (u64)resource_size(&intel_graphics_stolen_res) >> 20);
 	if (intel_vtd_active())
 		DRM_INFO("VT-d active for gfx access\n");
